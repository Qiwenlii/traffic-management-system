package tms.network;

import tms.intersection.Intersection;
import tms.sensors.DemoPressurePad;
import tms.sensors.DemoSpeedCamera;
import tms.sensors.DemoVehicleCount;
import tms.sensors.Sensor;
import tms.util.*;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class NetworkInitialiser {
    public static final String LINE_INFO_SEPARATOR = ":";
    public static final String LINE_LIST_SEPARATOR = ",";
    private static List<String[]> allLights = new ArrayList<>();
    public NetworkInitialiser() {
    }

    /**
     * Loads a saved Network from the file with the given filename.
     * Network files have the following structure. Square brackets indicate that
     * the data inside them is optional. For example, a route does not
     * necessarily need a speed sign (speedSignSpeed).
     * <p>
     * See the demo network for an example (demo.txt).
     * <p>
     * ; This is a comment. It should be ignored.
     * numIntersections
     * numRoutes
     * yellowTime
     * intersectionId[:duration:sequence,of,intersection,ids]
     * ... (more intersections)
     * intersectionFromId:intersectionToId:defaultSpeed:numSensors
     * [:speedSignSpeed]
     * SENSORTYPE:threshold:list,of,data,values
     * ... (more routes and sensors)
     * <p>
     * A network file is invalid if any of the following conditions are true:
     * <p>
     * The number of intersections specified is not equal to the number of
     * intersections read from the file.
     * The number of routes specified does not match the number read from the
     * file.
     * The number of sensors specified for a route does not match the number
     * read from the line below.
     * An intersection referenced by a route does not exist.
     * An intersection has an invalid ID according to
     * Network.createIntersection(String).
     * Two or more intersections have the same identifier string.
     * Two or more routes have the same starting and ending intersections,
     * e.g. a route X→Y and another route X→Y. A route is allowed to end at its
     * starting intersection, i.e. X→X is allowed.
     * A sensor type that is not one of the three provided demo sensors.
     * A route contains sensors of the same type.
     * The traffic light yellow time is less than one (1).
     * A traffic light duration is less than the traffic light yellow time plus
     * one (1).
     * For intersections with traffic lights:
     * The traffic light order for an intersection is not a permutation of that
     * intersection's incoming routes.
     * The traffic light order for an intersection is empty.
     * Any numeric value that should be non-negative is less than zero. This
     * includes:
     * route speeds
     * speed sign speeds
     * sensor thresholds (also, cannot be zero)
     * sensor data values
     * The colon-delimited format is violated, i.e. there are more/fewer colons
     * than expected.
     * Any numeric value fails to be parsed.
     * An empty line occurs where a non-empty line is expected.
     * The file contains any more than two (2) newline characters at the end of
     * the file.
     *
     * @param filename
     * @return
     * @throws IOException
     * @throws InvalidNetworkException
     */

    public static Network loadNetwork(String filename)
            throws IOException, InvalidNetworkException {
        int totalLine = 0, totalIntersection = 0, totalRoute = 0, nowLine = 1;
        Network network = new Network();
        try {
            BufferedReader file = new BufferedReader(new FileReader(filename));
            String line = file.readLine();
            //首先读第一行
            if (line == null) {
                System.out.println("空"+nowLine);
            }
            while (line != null) {

                //当下一行不为空的情况（记得最后再写一行代码读line）
                if (line.charAt(0) == ';') {
                    //如果是注释，直接读下一行
                    line = file.readLine();
                    continue;
                }
                else if (nowLine == 1) {
                    //路口的数量
                    totalIntersection = Integer.parseInt(line);
                }
                else if (nowLine == 2) {
                    //路的数量
                    totalRoute = Integer.parseInt(line);
                }
                else if (nowLine == 3) {
                    //黄灯
                    network.setYellowTime(Integer.parseInt(line));
                }
                else if (nowLine - 3 <= totalIntersection) {
                    creatIntersection(line, network);
                }
                else if (nowLine - 3 - totalIntersection <= totalRoute) {
                    String[] routeContent = line.split(LINE_INFO_SEPARATOR);
                    //Y:X:60:1:70
                    //PP:5:5,2,4,4,1,5,2,7,3,5,6,5,8,5,4,2,3,3,2,5
                    //对第四项做判断，如果为零，最后routeContent清零，如果为其他，不清零接着读sensor
                    //注意id包含：
                    //无论如何都包括前四项
                    network.connectIntersections(routeContent[0], routeContent[1],
                            Integer.parseInt(routeContent[2]));

                    if (routeContent.length == 5) {
                        //有speedsign，加speedsign
                        network.getConnection(routeContent[0],
                                routeContent[1]).addSpeedSign
                                (Integer.parseInt(routeContent[4]));
                    }
                    if (Integer.parseInt(routeContent[3]) != 0) {
                        //如果有传感器就接着往下读一行
                        //PP:8:1,3,2,1,1,3,4,7,4,7,9,7,8,4,8,8,5,3,2,2
                        //
                        String[] sensorContent, sensorValue;

                        for (int i = 0; i < Integer.parseInt(routeContent[3]);
                             i++) {
                            line = file.readLine();
                            addSensor (line, network, routeContent[0], routeContent[1]);
                        }
                    }
                }
                line = file.readLine();
                nowLine++;
            }
            // add trafic Light
            addLight(allLights, network);
            file.close();

        } catch (RouteNotFoundException | DuplicateSensorException | IntersectionNotFoundException | InvalidOrderException e) {
            throw new InvalidNetworkException();
        }
        return network;
    }

    private static void creatIntersection(String line, Network network){
        if (line.contains(":")) {
            //Y:3:Z,X (Y 名字，3 duration，Z,X 相连的路口)
            String[] intersectionContent = line.split(":|,");
            network.createIntersection(intersectionContent[0]);
            allLights.add(intersectionContent);
            //因为有的路口还没创建，所以需要保存light，最后创建
        } else {
            network.createIntersection(line);
        }
    }

    private static void addLight(List<String[]> allLights, Network network)
            throws IntersectionNotFoundException, InvalidOrderException {
        for (int i = 0; i < allLights.size(); i++) {
            List<String> order = new ArrayList<>();
            for (int k = 2; k < allLights.get(i).length; k++) {
                order.add(allLights.get(i)[k]);
            }
            if (Integer.parseInt(allLights.get(i)[1]) < 1) {
                throw new IllegalArgumentException("duration < 1");
            }
            network.addLights(allLights.get(i)[0],
                    (Integer.parseInt(allLights.get(i)[1])), order);
        }
    }

    private static void addSensor(String line, Network network, String from, String to)
            throws IntersectionNotFoundException, DuplicateSensorException,
            RouteNotFoundException {
        String[] sensorContent = line.split(LINE_INFO_SEPARATOR);
        Sensor newSensor;
        int threshold = Integer.parseInt(sensorContent[1]);
        if (threshold <= 0) {
            throw new IllegalArgumentException
                    ("threshold<=0");
        }
        String[] sensorValue = sensorContent[2].split(LINE_LIST_SEPARATOR);
        int[] sensorData = new int[sensorValue.length];
        for (int k = 0; k < sensorValue.length; k++) {
            sensorData[k] = Integer.parseInt(sensorValue[k]);
        }
        if (sensorContent[0].equals("PP")) {
            newSensor = new DemoPressurePad
                    (sensorData, threshold);
        } else if (sensorContent[0].equals("SC")) {
            newSensor = new DemoSpeedCamera
                    (sensorData, threshold);
        } else if (sensorContent[0].equals("VC")) {
            newSensor = new DemoVehicleCount
                    (sensorData, threshold);
        } else {
            throw new IllegalArgumentException
                    ("invalid sensor");
        }
        network.addSensor(from, to, newSensor);
        // network.addSensor(routeContent[0], routeContent[1], newSensor);

    }

}

